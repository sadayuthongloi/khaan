"""
MongoDB Connection Manager - Main Application
‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
"""

import eel
from database_manager import MongoDBConnectionManager, MongoDBClient
from html_generator import HTMLGenerator


# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Eel
eel.init('html')

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á managers
connection_manager = MongoDBConnectionManager()
html_generator = HTMLGenerator()


# Eel functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JavaScript
@eel.expose
def get_connections():
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• connections ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á JavaScript"""
    return connection_manager.connections


@eel.expose
def add_new_connection(name: str, host: str, port: int, database: str, 
                      username: str = "", password: str = ""):
    """‡πÄ‡∏û‡∏¥‡πà‡∏° connection ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å JavaScript"""
    success = connection_manager.add_connection(name, host, port, database, username, password)
    return {
        'success': success,
        'message': '‡πÄ‡∏û‡∏¥‡πà‡∏° connection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if success else '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° connection'
    }


@eel.expose
def delete_connection(name: str):
    """‡∏•‡∏ö connection ‡∏à‡∏≤‡∏Å JavaScript"""
    success = connection_manager.remove_connection(name)
    return {
        'success': success,
        'message': '‡∏•‡∏ö connection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if success else '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö connection'
    }


@eel.expose
def test_connection(name: str):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB"""
    try:
        # ‡∏´‡∏≤ connection ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
        connection = connection_manager.get_connection(name)
        
        if not connection:
            return {'success': False, 'message': '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        client = MongoDBClient(connection)
        result = client.test_connection()
        
        if result['success']:
            return {
                'success': True, 
                'message': f'‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\nüìç {connection["host"]}:{connection["port"]}\nüóÑÔ∏è ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {connection["database"]}'
            }
        else:
            return {'success': False, 'message': f'‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß\nüìç {connection["host"]}:{connection["port"]}\nüîç ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result["message"]}'}
            
    except Exception as e:
        return {'success': False, 'message': f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {str(e)}'}


@eel.expose
def use_connection(name: str):
    """‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô connection ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ main"""
    try:
        # ‡∏´‡∏≤ connection ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
        connection = connection_manager.get_connection(name)
        
        if not connection:
            return {'success': False, 'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
        client = MongoDBClient(connection)
        result = client.test_connection()
        
        if result['success']:
            return {
                'success': True, 
                'connection': connection,
                'database_exists': result.get('database_exists', False),
                'message': '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
            }
        else:
            return {'success': False, 'message': f'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: {result["message"]}'}
            
    except Exception as e:
        return {'success': False, 'message': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}


@eel.expose
def get_collections(connection_name: str):
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ collections ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    try:
        # ‡∏´‡∏≤ connection
        connection = connection_manager.get_connection(connection_name)
        
        if not connection:
            return {'success': False, 'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        # ‡∏î‡∏∂‡∏á collections
        client = MongoDBClient(connection)
        return client.get_collections()
        
    except Exception as e:
        return {'success': False, 'message': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}


@eel.expose
def get_collection_data(connection_name: str, collection_name: str, limit: int = 50, 
                        search_field: str = "", search_operator: str = "", search_value: str = ""):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô collection ‡∏û‡∏£‡πâ‡∏≠‡∏° search"""
    try:
        # ‡∏´‡∏≤ connection
        connection = connection_manager.get_connection(connection_name)
        
        if not connection:
            return {'success': False, 'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        client = MongoDBClient(connection)
        return client.get_collection_data(collection_name, limit, search_field, search_operator, search_value)
        
    except Exception as e:
        return {'success': False, 'message': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}


@eel.expose
def get_collection_fields(connection_name: str, collection_name: str):
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ fields ‡πÉ‡∏ô collection"""
    try:
        # ‡∏´‡∏≤ connection
        connection = connection_manager.get_connection(connection_name)
        
        if not connection:
            return {'success': False, 'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        # ‡∏î‡∏∂‡∏á fields
        client = MongoDBClient(connection)
        return client.get_collection_fields(collection_name)
        
    except Exception as e:
        return {'success': False, 'message': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}


@eel.expose
def create_database(connection_name: str, database_name: str):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà"""
    try:
        # ‡∏´‡∏≤ connection
        connection = connection_manager.get_connection(connection_name)
        
        if not connection:
            return {'success': False, 'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        client = MongoDBClient(connection)
        return client.create_database(database_name)
        
    except Exception as e:
        return {'success': False, 'message': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô"""
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML interface
    html_generator.generate_index_html()
    html_generator.generate_main_html()
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Eel application
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MongoDB Connection Manager...")
    print("‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà: http://localhost:8000")
    
    try:
        eel.start('index.html', size=(1200, 800), port=8000)
    except (SystemExit, MemoryError, KeyboardInterrupt):
        print("‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô...")


if __name__ == "__main__":
    main()
