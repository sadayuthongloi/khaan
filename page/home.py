import eel
import json
import os
from typing import Dict, List, Optional

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Eel
eel.init('html')

class MongoDBConnectionManager:
    def __init__(self, config_file: str = 'config.json'):
        self.config_file = config_file
        self.connections = self.load_connections()
    
    def load_connections(self) -> List[Dict]:
        """‡πÇ‡∏´‡∏•‡∏î connections ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå config.json"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return data.get('connections', [])
            return []
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î config: {e}")
            return []
    
    def save_connections(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å connections ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå config.json"""
        try:
            config_data = {
                'connections': self.connections
            }
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config: {e}")
            return False
    
    def add_connection(self, name: str, host: str, port: int, database: str, 
                      username: str = "", password: str = "") -> bool:
        """‡πÄ‡∏û‡∏¥‡πà‡∏° connection ‡πÉ‡∏´‡∏°‡πà"""
        try:
            new_connection = {
                'name': name,
                'host': host,
                'port': port,
                'database': database,
                'username': username,
                'password': password
            }
            self.connections.append(new_connection)
            return self.save_connections()
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° connection: {e}")
            return False
    
    def remove_connection(self, name: str) -> bool:
        """‡∏•‡∏ö connection ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠"""
        try:
            self.connections = [conn for conn in self.connections if conn['name'] != name]
            return self.save_connections()
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö connection: {e}")
            return False

# ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á connection manager
connection_manager = MongoDBConnectionManager()

# Eel functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JavaScript
@eel.expose
def get_connections():
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• connections ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á JavaScript"""
    return connection_manager.connections

@eel.expose
def add_new_connection(name: str, host: str, port: int, database: str, 
                      username: str = "", password: str = ""):
    """‡πÄ‡∏û‡∏¥‡πà‡∏° connection ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å JavaScript"""
    success = connection_manager.add_connection(name, host, port, database, username, password)
    return {
        'success': success,
        'message': '‡πÄ‡∏û‡∏¥‡πà‡∏° connection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if success else '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° connection'
    }

@eel.expose
def delete_connection(name: str):
    """‡∏•‡∏ö connection ‡∏à‡∏≤‡∏Å JavaScript"""
    success = connection_manager.remove_connection(name)
    return {
        'success': success,
        'message': '‡∏•‡∏ö connection ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if success else '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö connection'
    }

@eel.expose
def test_connection(name: str):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB"""
    try:
        # ‡∏´‡∏≤ connection ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
        connection = None
        for conn in connection_manager.connections:
            if conn['name'] == name:
                connection = conn
                break
        
        if not connection:
            return {'success': False, 'message': '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏î‡πâ‡∏ß‡∏¢ pymongo
        try:
            from pymongo import MongoClient
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection string
            if connection['username'] and connection['password']:
                # ‡∏°‡∏µ authentication
                connection_string = f"mongodb://{connection['username']}:{connection['password']}@{connection['host']}:{connection['port']}/"
            else:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ authentication
                connection_string = f"mongodb://{connection['host']}:{connection['port']}/"
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            client = MongoClient(connection_string, serverSelectionTimeoutMS=5000)
            client.admin.command('ping')
            client.close()
            
            return {'success': True, 'message': f'‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ {name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\nüìç {connection["host"]}:{connection["port"]}\nüóÑÔ∏è ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {connection["database"]}'}
            
        except ImportError:
            # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pymongo
            return {'success': True, 'message': f'‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ {name} ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\nüìç {connection["host"]}:{connection["port"]}\nüóÑÔ∏è ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {connection["database"]}\n‚ö†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á pymongo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á'}
            
        except Exception as e:
            return {'success': False, 'message': f'‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß\nüìç {connection["host"]}:{connection["port"]}\nüîç ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}
            
    except Exception as e:
        return {'success': False, 'message': f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {str(e)}'}

@eel.expose
def use_connection(name: str):
    """‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô connection ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ main"""
    try:
        # ‡∏´‡∏≤ connection ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
        connection = None
        for conn in connection_manager.connections:
            if conn['name'] == name:
                connection = conn
                break
        
        if not connection:
            return {'success': False, 'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô
        try:
            from pymongo import MongoClient
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection string
            if connection['username'] and connection['password']:
                connection_string = f"mongodb://{connection['username']}:{connection['password']}@{connection['host']}:{connection['port']}/"
            else:
                connection_string = f"mongodb://{connection['host']}:{connection['port']}/"
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            client = MongoClient(connection_string, serverSelectionTimeoutMS=5000)
            client.admin.command('ping')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            db_name = connection['database']
            database_exists = db_name in client.list_database_names()
            
            client.close()
            
            return {
                'success': True, 
                'connection': connection,
                'database_exists': database_exists,
                'message': '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
            }
            
        except Exception as e:
            return {'success': False, 'message': f'‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: {str(e)}'}
            
    except Exception as e:
        return {'success': False, 'message': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}

@eel.expose
def get_collections(connection_name: str):
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ collections ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    try:
        # ‡∏´‡∏≤ connection
        connection = None
        for conn in connection_manager.connections:
            if conn['name'] == connection_name:
                connection = conn
                break
        
        if not connection:
            return {'success': False, 'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        from pymongo import MongoClient
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection string
        if connection['username'] and connection['password']:
            connection_string = f"mongodb://{connection['username']}:{connection['password']}@{connection['host']}:{connection['port']}/"
        else:
            connection_string = f"mongodb://{connection['host']}:{connection['port']}/"
        
        client = MongoClient(connection_string)
        db = client[connection['database']]
        
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ collections ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        collections = sorted(list(db.list_collection_names()))
        
        client.close()
        
        return {'success': True, 'collections': collections}
        
    except Exception as e:
        return {'success': False, 'message': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}

@eel.expose
def get_collection_data(connection_name: str, collection_name: str, limit: int = 50, search_field: str = "", search_operator: str = "", search_value: str = ""):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô collection ‡∏û‡∏£‡πâ‡∏≠‡∏° search"""
    try:
        # ‡∏´‡∏≤ connection
        connection = None
        for conn in connection_manager.connections:
            if conn['name'] == connection_name:
                connection = conn
                break
        
        if not connection:
            return {'success': False, 'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        from pymongo import MongoClient
        import re
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection string
        if connection['username'] and connection['password']:
            connection_string = f"mongodb://{connection['username']}:{connection['password']}@{connection['host']}:{connection['port']}/"
        else:
            connection_string = f"mongodb://{connection['host']}:{connection['port']}/"
        
        client = MongoClient(connection_string)
        db = client[connection['database']]
        collection = db[collection_name]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á query filter
        query_filter = {}
        if search_field and search_operator and search_value:
            if search_operator == "=":
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö
                query_filter[search_field] = search_value
            elif search_operator == "like":
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö like (regex)
                query_filter[search_field] = {"$regex": search_value, "$options": "i"}
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        documents = list(collection.find(query_filter).limit(limit))
        
        # ‡πÅ‡∏õ‡∏•‡∏á ObjectId ‡πÄ‡∏õ‡πá‡∏ô string
        for doc in documents:
            if '_id' in doc:
                doc['_id'] = str(doc['_id'])
        
        client.close()
        
        return {'success': True, 'data': documents}
        
    except Exception as e:
        return {'success': False, 'message': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}

@eel.expose
def get_collection_fields(connection_name: str, collection_name: str):
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ fields ‡πÉ‡∏ô collection"""
    try:
        # ‡∏´‡∏≤ connection
        connection = None
        for conn in connection_manager.connections:
            if conn['name'] == connection_name:
                connection = conn
                break
        
        if not connection:
            return {'success': False, 'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        from pymongo import MongoClient
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection string
        if connection['username'] and connection['password']:
            connection_string = f"mongodb://{connection['username']}:{connection['password']}@{connection['host']}:{connection['port']}/"
        else:
            connection_string = f"mongodb://{connection['host']}:{connection['port']}/"
        
        client = MongoClient(connection_string)
        db = client[connection['database']]
        collection = db[collection_name]
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ fields
        sample_docs = list(collection.find().limit(10))
        
        # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° fields ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        fields = set()
        for doc in sample_docs:
            fields.update(doc.keys())
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö fields ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        fields = sorted(list(fields))
        
        client.close()
        
        return {'success': True, 'fields': fields}
        
    except Exception as e:
        return {'success': False, 'message': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}

@eel.expose
def create_database(connection_name: str, database_name: str):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà"""
    try:
        # ‡∏´‡∏≤ connection
        connection = None
        for conn in connection_manager.connections:
            if conn['name'] == connection_name:
                connection = conn
                break
        
        if not connection:
            return {'success': False, 'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö connection ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
        
        from pymongo import MongoClient
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection string
        if connection['username'] and connection['password']:
            connection_string = f"mongodb://{connection['username']}:{connection['password']}@{connection['host']}:{connection['port']}/"
        else:
            connection_string = f"mongodb://{connection['host']}:{connection['port']}/"
        
        client = MongoClient(connection_string)
        db = client[database_name]
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á collection ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
        db.create_collection('temp_collection')
        db.drop_collection('temp_collection')
        
        client.close()
        
        return {'success': True, 'message': f'‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {database_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'}
        
    except Exception as e:
        return {'success': False, 'message': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}'}

def create_html_interface():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö interface"""
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå html ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if not os.path.exists('html'):
        os.makedirs('html')
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå index.html
    html_content = """
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MongoDB Connection Manager</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .content {
            padding: 30px;
        }
        
        .section {
            margin-bottom: 40px;
        }
        
        .section h2 {
            color: #333;
            margin-bottom: 20px;
            font-size: 1.5em;
            border-bottom: 2px solid #667eea;
            padding-bottom: 10px;
        }
        
        .connections-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .connection-card {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 20px;
            transition: all 0.3s ease;
        }
        
        .connection-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        
        .connection-name {
            font-size: 1.2em;
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }
        
        .connection-details {
            color: #666;
            margin-bottom: 15px;
        }
        
        .connection-actions {
            display: flex;
            gap: 10px;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn-primary {
            background: #667eea;
            color: white;
        }
        
        .btn-primary:hover {
            background: #5a6fd8;
        }
        
        .btn-success {
            background: #28a745;
            color: white;
        }
        
        .btn-success:hover {
            background: #218838;
        }
        
        .btn-danger {
            background: #dc3545;
            color: white;
        }
        
        .btn-danger:hover {
            background: #c82333;
        }
        
        .btn-warning {
            background: #ffc107;
            color: #212529;
        }
        
        .btn-warning:hover {
            background: #e0a800;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #333;
        }
        
        .form-group input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
        }
        
        .form-group input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
        }
        
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        .alert {
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-danger {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .hidden {
            display: none;
        }
        
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }
        
        .test-result-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .test-result-content {
            background: white;
            border-radius: 15px;
            padding: 30px;
            max-width: 500px;
            width: 90%;
            text-align: center;
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
            animation: slideIn 0.3s ease;
        }
        
        @keyframes slideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }
        
        .test-result-icon {
            font-size: 4em;
            margin-bottom: 20px;
        }
        
        .test-result-message {
            font-size: 1.1em;
            line-height: 1.6;
            margin-bottom: 25px;
            white-space: pre-line;
        }
        
        .test-result-success {
            color: #28a745;
        }
        
        .test-result-error {
            color: #dc3545;
        }
        
        .test-result-warning {
            color: #ffc107;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>MongoDB Connection Manager</h1>
            <p>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MongoDB ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        </div>
        
        <div class="content">
            <!-- ‡πÅ‡∏™‡∏î‡∏á Connections ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà -->
            <div class="section">
                <h2>‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà</h2>
                <div id="connections-container" class="connections-grid">
                    <!-- Connections ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà -->
                </div>
                <button class="btn btn-primary" onclick="showNewConnectionForm()">
                    + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
                </button>
            </div>
            
            <!-- Form ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Connection ‡πÉ‡∏´‡∏°‡πà -->
            <div id="new-connection-form" class="section hidden">
                <h2>‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà</h2>
                <div id="form-alert"></div>
                <form id="connection-form">
                    <div class="form-group">
                        <label for="connection-name">‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ *</label>
                        <input type="text" id="connection-name" required>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="connection-host">Host *</label>
                            <input type="text" id="connection-host" value="localhost" required>
                        </div>
                        <div class="form-group">
                            <label for="connection-port">Port *</label>
                            <input type="number" id="connection-port" value="27017" required>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="connection-database">‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• *</label>
                        <input type="text" id="connection-database" required>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="connection-username">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
                            <input type="text" id="connection-username">
                        </div>
                        <div class="form-group">
                            <label for="connection-password">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
                            <input type="password" id="connection-password">
                        </div>
                    </div>
                    
                    <div class="connection-actions">
                        <button type="submit" class="btn btn-success">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</button>
                        <button type="button" class="btn btn-danger" onclick="hideNewConnectionForm()">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script type="text/javascript" src="/eel.js"></script>
    <script>
        // ‡πÇ‡∏´‡∏•‡∏î connections ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        document.addEventListener('DOMContentLoaded', function() {
            loadConnections();
        });
        
        // ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á connections
        async function loadConnections() {
            try {
                const connections = await eel.get_connections()();
                displayConnections(connections);
            } catch (error) {
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î connections:', error);
            }
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á connections ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        function displayConnections(connections) {
            const container = document.getElementById('connections-container');
            
            if (connections.length === 0) {
                container.innerHTML = '<p style="grid-column: 1 / -1; text-align: center; color: #666;">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏î‡πÜ</p>';
                return;
            }
            
            container.innerHTML = connections.map(conn => `
                <div class="connection-card">
                    <div class="connection-name">${conn.name}</div>
                    <div class="connection-details">
                        <div><strong>Host:</strong> ${conn.host}:${conn.port}</div>
                        <div><strong>Database:</strong> ${conn.database}</div>
                        ${conn.username ? `<div><strong>Username:</strong> ${conn.username}</div>` : ''}
                    </div>
                    <div class="connection-actions">
                        <button class="btn btn-success" onclick="testConnection('${conn.name}')">‡∏ó‡∏î‡∏™‡∏≠‡∏ö</button>
                        <button class="btn btn-primary" onclick="useConnection('${conn.name}')">‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</button>
                        <button class="btn btn-danger" onclick="deleteConnection('${conn.name}')">‡∏•‡∏ö</button>
                    </div>
                </div>
            `).join('');
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á form ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á connection ‡πÉ‡∏´‡∏°‡πà
        function showNewConnectionForm() {
            document.getElementById('new-connection-form').classList.remove('hidden');
            document.getElementById('form-alert').innerHTML = '';
        }
        
        // ‡∏ã‡πà‡∏≠‡∏ô form ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á connection ‡πÉ‡∏´‡∏°‡πà
        function hideNewConnectionForm() {
            document.getElementById('new-connection-form').classList.add('hidden');
            document.getElementById('connection-form').reset();
        }
        
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á form
        document.getElementById('connection-form').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                name: document.getElementById('connection-name').value,
                host: document.getElementById('connection-host').value,
                port: parseInt(document.getElementById('connection-port').value),
                database: document.getElementById('connection-database').value,
                username: document.getElementById('connection-username').value,
                password: document.getElementById('connection-password').value
            };
            
            try {
                const result = await eel.add_new_connection(
                    formData.name,
                    formData.host,
                    formData.port,
                    formData.database,
                    formData.username,
                    formData.password
                )();
                
                showAlert(result.message, result.success ? 'success' : 'danger');
                
                if (result.success) {
                    hideNewConnectionForm();
                    loadConnections();
                }
            } catch (error) {
                showAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', 'danger');
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
            }
        });
        
        // ‡∏•‡∏ö connection
        async function deleteConnection(name) {
            if (!confirm(`‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ "${name}"?`)) {
                return;
            }
            
            try {
                const result = await eel.delete_connection(name)();
                showAlert(result.message, result.success ? 'success' : 'danger');
                
                if (result.success) {
                    loadConnections();
                }
            } catch (error) {
                showAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö', 'danger');
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
            }
        }
        
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö connection
        async function testConnection(name) {
            try {
                // ‡πÅ‡∏™‡∏î‡∏á loading state
                const button = event.target;
                const originalText = button.textContent;
                button.textContent = 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...';
                button.disabled = true;
                button.classList.add('loading');
                
                const result = await eel.test_connection(name)();
                
                // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°
                button.textContent = originalText;
                button.disabled = false;
                button.classList.remove('loading');
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                showTestResult(result.message, result.success);
            } catch (error) {
                // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                const button = event.target;
                button.textContent = '‡∏ó‡∏î‡∏™‡∏≠‡∏ö';
                button.disabled = false;
                button.classList.remove('loading');
                
                showTestResult('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö', false);
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
            }
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á alert
        function showAlert(message, type) {
            const alertDiv = document.getElementById('form-alert');
            alertDiv.innerHTML = `<div class="alert alert-${type}">${message}</div>`;
            
            // ‡∏•‡∏ö alert ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(() => {
                alertDiv.innerHTML = '';
            }, 5000);
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö modal
        function showTestResult(message, isSuccess) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á modal element
            const modal = document.createElement('div');
            modal.className = 'test-result-modal';
            
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î icon ‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            let icon, colorClass;
            if (isSuccess) {
                icon = '‚úÖ';
                colorClass = 'test-result-success';
            } else {
                icon = '‚ùå';
                colorClass = 'test-result-error';
            }
            
            modal.innerHTML = `
                <div class="test-result-content">
                    <div class="test-result-icon ${colorClass}">${icon}</div>
                    <div class="test-result-message ${colorClass}">${message}</div>
                    <button class="btn btn-primary" onclick="closeTestResult()">‡∏ï‡∏Å‡∏•‡∏á</button>
                </div>
            `;
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° modal ‡∏•‡∏á‡πÉ‡∏ô body
            document.body.appendChild(modal);
            
            // ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    closeTestResult();
                }
            });
            
            // ‡∏õ‡∏¥‡∏î modal ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î ESC
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    closeTestResult();
                }
            });
        }
        
        // ‡∏õ‡∏¥‡∏î modal ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        function closeTestResult() {
            const modal = document.querySelector('.test-result-modal');
            if (modal) {
                modal.remove();
            }
        }
        
        // ‡πÉ‡∏ä‡πâ connection ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ main
        async function useConnection(name) {
            try {
                const result = await eel.use_connection(name)();
                
                if (result.success) {
                    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• connection ‡πÉ‡∏ô sessionStorage
                    sessionStorage.setItem('currentConnection', JSON.stringify(result.connection));
                    sessionStorage.setItem('databaseExists', result.database_exists);
                    
                    // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ main
                    window.location.href = 'main.html';
                } else {
                    showAlert(result.message, 'danger');
                }
            } catch (error) {
                showAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠', 'danger');
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
            }
        }
    </script>
</body>
</html>
    """
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå index.html
    with open('html/index.html', 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå main.html
    main_html_content = """
<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MongoDB Manager - Main</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f5f7fa;
            height: 100vh;
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 1.8em;
        }
        
        .connection-info {
            display: flex;
            align-items: center;
            gap: 20px;
        }
        
        .connection-details {
            font-size: 0.9em;
            opacity: 0.9;
        }
        
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
        }
        
        .btn-primary {
            background: #667eea;
            color: white;
        }
        
        .btn-primary:hover {
            background: #5a6fd8;
        }
        
        .btn-success {
            background: #28a745;
            color: white;
        }
        
        .btn-success:hover {
            background: #218838;
        }
        
        .btn-danger {
            background: #dc3545;
            color: white;
        }
        
        .btn-danger:hover {
            background: #c82333;
        }
        
        .main-container {
            display: flex;
            height: calc(100vh - 80px);
        }
        
        .sidebar {
            width: 300px;
            background: white;
            border-right: 1px solid #e9ecef;
            overflow-y: auto;
        }
        
        .content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .database-section {
            background: white;
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
        }
        
        .database-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }
        
        .database-name {
            font-size: 1.2em;
            font-weight: bold;
            color: #333;
        }
        
        .collections-section {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
        }
        
        .collection-item {
            padding: 12px 15px;
            border: 1px solid #e9ecef;
            border-radius: 5px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }
        
        .collection-item:hover {
            background: #e9ecef;
            border-color: #667eea;
        }
        
        .collection-item.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }
        
        .data-section {
            flex: 1;
            background: white;
            margin: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        
        .data-header {
            padding: 20px;
            border-bottom: 1px solid #e9ecef;
            background: #f8f9fa;
        }
        
        .data-title {
            font-size: 1.3em;
            font-weight: bold;
            color: #333;
            margin-bottom: 10px;
        }
        
        .data-stats {
            color: #666;
            font-size: 0.9em;
        }
        
        .data-content {
            flex: 1;
            overflow: auto;
            padding: 20px;
        }
        
        .data-table {
            width: 100%;
            border-collapse: collapse;
        }
        
        .data-table th,
        .data-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }
        
        .data-table th {
            background: #f8f9fa;
            font-weight: bold;
            color: #333;
        }
        
        .data-table tr:hover {
            background: #f8f9fa;
        }
        
        .json-view {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 5px;
            padding: 15px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
            white-space: pre-wrap;
            overflow-x: auto;
        }
        
        .no-data {
            text-align: center;
            color: #666;
            padding: 40px;
            font-size: 1.1em;
        }
        
        .alert {
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        
        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert-danger {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="header">
        <div>
            <h1>MongoDB Manager</h1>
            <div class="connection-info">
                <div class="connection-details" id="connection-details">
                    <!-- ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà -->
                </div>
            </div>
        </div>
        <button class="btn btn-danger" onclick="goBack()">‚Üê ‡∏Å‡∏•‡∏±‡∏ö</button>
    </div>
    
    <div class="main-container">
        <div class="sidebar">
            <div class="database-section">
                <div class="database-info">
                    <div class="database-name" id="database-name">
                        <!-- ‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà -->
                    </div>
                    <button class="btn btn-success" id="create-db-btn" onclick="createDatabase()" style="display: none;">
                        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    </button>
                </div>
                <div id="database-alert"></div>
            </div>
            
            <div class="collections-section">
                <h3>Collections</h3>
                <div id="collections-container">
                    <div class="loading">
                        <div class="spinner"></div>
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î collections...
                    </div>
                </div>
            </div>
        </div>
        
        <div class="content">
            <div class="data-section">
                <div class="data-header">
                    <div class="data-title" id="data-title">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Collection ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
                    <div class="data-stats" id="data-stats"></div>
                </div>
                <div class="data-content" id="data-content">
                    <div class="no-data">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Collection ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript" src="/eel.js"></script>
    <script>
        let currentConnection = null;
        let currentCollection = null;
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        document.addEventListener('DOMContentLoaded', function() {
            loadConnectionInfo();
            loadCollections();
        });
        
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        function loadConnectionInfo() {
            const connectionData = sessionStorage.getItem('currentConnection');
            if (connectionData) {
                currentConnection = JSON.parse(connectionData);
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
                document.getElementById('connection-details').innerHTML = `
                    <strong>${currentConnection.name}</strong><br>
                    ${currentConnection.host}:${currentConnection.port}
                `;
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                document.getElementById('database-name').textContent = currentConnection.database;
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                const databaseExists = sessionStorage.getItem('databaseExists') === 'true';
                if (!databaseExists) {
                    document.getElementById('create-db-btn').style.display = 'inline-block';
                }
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
                goBack();
            }
        }
        
        // ‡πÇ‡∏´‡∏•‡∏î collections
        async function loadCollections() {
            try {
                const result = await eel.get_collections(currentConnection.name)();
                
                if (result.success) {
                    displayCollections(result.collections);
                } else {
                    showDatabaseAlert(result.message, 'danger');
                }
            } catch (error) {
                showDatabaseAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î collections', 'danger');
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
            }
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á collections
        function displayCollections(collections) {
            const container = document.getElementById('collections-container');
            
            if (collections.length === 0) {
                container.innerHTML = '<div class="no-data">‡πÑ‡∏°‡πà‡∏°‡∏µ collections ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ</div>';
                return;
            }
            
            const collectionsList = collections.map(collection => `
                <div class="collection-item" onclick="selectCollection('${collection}')">
                    üìÑ ${collection}
                </div>
            `).join('');
            
            container.innerHTML = collectionsList;
        }
        
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å collection
        async function selectCollection(collectionName) {
            try {
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï active state
                document.querySelectorAll('.collection-item').forEach(item => {
                    item.classList.remove('active');
                });
                event.target.classList.add('active');
                
                currentCollection = collectionName;
                
                // ‡πÅ‡∏™‡∏î‡∏á loading
                document.getElementById('data-title').textContent = `Collection: ${collectionName}`;
                document.getElementById('data-content').innerHTML = `
                    <div class="loading">
                        <div class="spinner"></div>
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
                    </div>
                `;
                
                // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                const result = await eel.get_collection_data(currentConnection.name, collectionName, 50)();
                
                if (result.success) {
                    displayData(result.data);
                } else {
                    document.getElementById('data-content').innerHTML = `
                        <div class="alert alert-danger">${result.message}</div>
                    `;
                }
            } catch (error) {
                document.getElementById('data-content').innerHTML = `
                    <div class="alert alert-danger">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
                `;
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
            }
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        function displayData(data) {
            const container = document.getElementById('data-content');
            
            if (data.length === 0) {
                container.innerHTML = '<div class="no-data">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô collection ‡∏ô‡∏µ‡πâ</div>';
                document.getElementById('data-stats').textContent = '0 ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£';
                return;
            }
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            document.getElementById('data-stats').textContent = `${data.length} ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡πÅ‡∏™‡∏î‡∏á 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å)`;
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            if (data.length > 0) {
                const fields = Object.keys(data[0]);
                
                const tableHTML = `
                    <table class="data-table">
                        <thead>
                            <tr>
                                ${fields.map(field => `<th>${field}</th>`).join('')}
                            </tr>
                        </thead>
                        <tbody>
                            ${data.map(doc => `
                                <tr>
                                    ${fields.map(field => `<td>${formatValue(doc[field])}</td>`).join('')}
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
                
                container.innerHTML = tableHTML;
            }
        }
        
        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡πà‡∏≤
        function formatValue(value) {
            if (value === null || value === undefined) {
                return '<em>null</em>';
            }
            
            if (typeof value === 'object') {
                return `<div class="json-view">${JSON.stringify(value, null, 2)}</div>`;
            }
            
            if (typeof value === 'string' && value.length > 100) {
                return value.substring(0, 100) + '...';
            }
            
            return String(value);
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        async function createDatabase() {
            if (!currentConnection) return;
            
            try {
                const result = await eel.create_database(currentConnection.name, currentConnection.database)();
                
                if (result.success) {
                    showDatabaseAlert(result.message, 'success');
                    document.getElementById('create-db-btn').style.display = 'none';
                    loadCollections();
                } else {
                    showDatabaseAlert(result.message, 'danger');
                }
            } catch (error) {
                showDatabaseAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', 'danger');
                console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
            }
        }
        
        // ‡πÅ‡∏™‡∏î‡∏á alert ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        function showDatabaseAlert(message, type) {
            const alertDiv = document.getElementById('database-alert');
            alertDiv.innerHTML = `<div class="alert alert-${type}">${message}</div>`;
            
            setTimeout(() => {
                alertDiv.innerHTML = '';
            }, 5000);
        }
        
        // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        function goBack() {
            sessionStorage.removeItem('currentConnection');
            sessionStorage.removeItem('databaseExists');
            window.location.href = 'index.html';
        }
    </script>
</body>
</html>
    """
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå main.html
    with open('html/main.html', 'w', encoding='utf-8') as f:
        f.write(main_html_content)

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô"""
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML interface
    create_html_interface()
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Eel application
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MongoDB Connection Manager...")
    print("‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà: http://localhost:8000")
    
    try:
        eel.start('index.html', size=(1200, 800), port=8000)
    except (SystemExit, MemoryError, KeyboardInterrupt):
        print("‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô...")

if __name__ == "__main__":
    main()
